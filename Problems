Leetcode #21: Merge Two sorted list: 

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode dummy(0);
        ListNode* tail = &dummy;

        while (list1 && list2) {
            if (list1->val < list2->val) {
                tail->next = list1;
                list1 = list1->next;
            } else {
                tail->next = list2;
                list2 = list2->next;
            }
            tail = tail->next;
        }

        tail->next = list1 ? list1 : list2;
        return dummy.next;
    }
};

##Leetcode 22 : Generate  Parenthesis
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> result;
        backtrack(result, "", 0, 0, n);
        return result;
    }

    void backtrack(vector<string>& result, string current, int open, int close, int max) {
        if (current.length() == max * 2) {
            result.push_back(current);
            return;
        }

        if (open < max)
            backtrack(result, current + "(", open + 1, close, max);
        if (close < open)
            backtrack(result, current + ")", open, close + 1, max);
    }
};

##Leetcode 51: N-Queens:
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<string> board(n, string(n, '.'));
        vector<bool> cols(n), diag1(2 * n - 1), diag2(2 * n - 1);
        backtrack(0, n, board, cols, diag1, diag2, result);
        return result;
    }

    void backtrack(int row, int n, vector<string>& board,
                   vector<bool>& cols, vector<bool>& diag1,
                   vector<bool>& diag2, vector<vector<string>>& result) {
        if (row == n) {
            result.push_back(board);
            return;
        }

        for (int col = 0; col < n; col++) {
            if (cols[col] || diag1[row + col] || diag2[row - col + n - 1])
                continue;

            board[row][col] = 'Q';
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = true;

            backtrack(row + 1, n, board, cols, diag1, diag2, result);

            board[row][col] = '.';
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = false;
        }
    }
};

##Leetcode 52: N-Queens 2
class Solution {
public:
    int totalNQueens(int n) {
        vector<bool> cols(n);
        vector<bool> diag1(2 * n - 1);
        vector<bool> diag2(2 * n - 1);
        return solve(0, n, cols, diag1, diag2);
    }

    int solve(int row, int n, vector<bool>& cols, vector<bool>& diag1, vector<bool>& diag2) {
        if (row == n) return 1;
        int count = 0;

        for (int col = 0; col < n; ++col) {
            if (cols[col] || diag1[row + col] || diag2[row - col + n - 1]) continue;

            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = true;
            count += solve(row + 1, n, cols, diag1, diag2);
            cols[col] = diag1[row + col] = diag2[row - col + n - 1] = false;
        }

##LeetCode 65 : Valid Number
class Solution {
public:
    bool isNumber(string s) {
        int i = 0, n = s.size();
        
        // Skip leading spaces
        while (i < n && s[i] == ' ') i++;

        // Optional sign
        if (i < n && (s[i] == '+' || s[i] == '-')) i++;

        bool isNumeric = false, isDot = false, isExp = false;

        while (i < n) {
            if (isdigit(s[i])) {
                isNumeric = true;
            } else if (s[i] == '.') {
                if (isDot || isExp) return false;
                isDot = true;
            } else if (s[i] == 'e' || s[i] == 'E') {
                if (isExp || !isNumeric) return false;
                isExp = true;
                isNumeric = false;

                // Optional sign after e
                if (i + 1 < n && (s[i + 1] == '+' || s[i + 1] == '-')) i++;
            } else if (s[i] == ' ') {
                // Skip trailing spaces
                while (i < n && s[i] == ' ') i++;
                return i == n && isNumeric;
            } else {
                return false;
            }
            i++;
        }
        return isNumeric;
    }
};


##LeetCode 68: Text Justification
class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        vector<string> result;
        int i = 0, n = words.size();

        while (i < n) {
            int lineLen = words[i].size();
            int j = i + 1;

            while (j < n && lineLen + words[j].size() + (j - i) <= maxWidth) {
                lineLen += words[j].size();
                j++;
            }

            int gaps = j - i - 1;
            string line;

            if (j == n || gaps == 0) {
                // Last line or line with one word
                for (int k = i; k < j; ++k) {
                    line += words[k];
                    if (k < j - 1) line += " ";
                }
                line += string(maxWidth - line.size(), ' ');
            } else {
                int totalSpaces = maxWidth - lineLen;
                int space = totalSpaces / gaps;
                int extra = totalSpaces % gaps;

                for (int k = i; k < j - 1; ++k) {
                    line += words[k];
                    line += string(space + (k - i < extra ? 1 : 0), ' ');
                }
                line += words[j - 1];
            }

            result.push_back(line);
            i = j;
        }

        return result;
    }
};

##Leetcode 60: Permutation Sequence
class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> nums;
        for (int i = 1; i <= n; ++i)
            nums.push_back(i);

        vector<int> fact(n, 1);
        for (int i = 1; i < n; ++i)
            fact[i] = fact[i - 1] * i;

        k--; // convert to 0-based index
        string result;

        for (int i = n; i >= 1; --i) {
            int idx = k / fact[i - 1];
            k %= fact[i - 1];
            result += to_string(nums[idx]);
            nums.erase(nums.begin() + idx);
        }

        return result;
    }
};

##Leetcode 54:Spiral Matrix
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;
        if (matrix.empty() || matrix[0].empty()) return result;

        int top = 0, bottom = matrix.size() - 1;
        int left = 0, right = matrix[0].size() - 1;

        while (top <= bottom && left <= right) {
            for (int i = left; i <= right; ++i)
                result.push_back(matrix[top][i]);
            top++;

            for (int i = top; i <= bottom; ++i)
                result.push_back(matrix[i][right]);
            right--;

            if (top <= bottom) {
                for (int i = right; i >= left; --i)
                    result.push_back(matrix[bottom][i]);
                bottom--;
            }

            if (left <= right) {
                for (int i = bottom; i >= top; --i)
                    result.push_back(matrix[i][left]);
                left++;
            }
        }

        return result;
    }
};
